plot(qpot5_grid)
Dt <- 1
ncwide <- ncvar_get(ncin, "dmflow",
start=c(1,1,tstart), count=c(-1, -1, Dt))
print("ncwide get")
image.plot(ncwide)
qpot5_grid <- ncvar_get(ncin, "dmflow",
start=c(700,1250,1), count=c(1, 1, -1))
range(qpot5_grid)
print(getwd())
print(here::here())
events_per_year <- 5
nonexceed <- 1 - (events_per_year/365)
inun_thresh <- 0.01
filepath <- paste0("/Scoping/InterimData/extremedates_", floor(inun_thresh*100),
"inun_", events_per_year, "epy.csv")
extremes <- read_csv(here::here(filepath), col_names=TRUE)
filepath <- paste0("/Scoping/InterimData/qPOT_", events_per_year,
"epy_sans_mask.csv")
qPOT5 <- read_csv(here::here(filepath), col_names=FALSE, na="-9999")
image.plot(t(as.matrix(qPOT5)), zlim=c(0,1000), x=0:700, y=0:1250)
filepath <- paste0("/Scoping/InterimData/qPOT_mask.csv")
qPOT5_mask <- read_csv(here::here(filepath), col_names=FALSE, na="-9999")
image.plot(1*t(as.matrix(qPOT5_mask)), zlim=c(0,1), x=0:700, y=0:1250)
which.min(extremes$Inun)
which(extremes$Inun == min(extremes$Inun))
for(w in wMin){
flow <- ncvar_get(ncin, "dmflow",
start=c(1,1,w), count=c(-1, -1, 1))
}
w <- Wmin[1]
flow <- ncvar_get(ncin, "dmflow",
start=c(1,1,w), count=c(-1, -1, 1))
Wmin <- which(extremes$Inun == min(extremes$Inun))
w <- Wmin[1]
flow <- ncvar_get(ncin, "dmflow",
start=c(1,1,w), count=c(-1, -1, 1))
image.plot(flow)
Wmin <- which(extremes$Inun == min(extremes$Inun))
w <- Wmin[1]
for(w in wMin){
flow <- ncvar_get(ncin, "dmflow",
start=c(1,1,w), count=c(-1, -1, 1))
}
image.plot(flow, x=0:700, y=0:1250)
image.plot(flow[flow > -1])
flow[flow <= -1] <- NA
image.plot(flow)
Wmin <- which(extremes$Inun == min(extremes$Inun))
w <- Wmin[1]
flow <- ncvar_get(ncin, "dmflow", start=c(1,1,w), count=c(-1, -1, 1))
#image.plot(flow, x=0:700, y=0:1250)
flow[flow < as.matrix(qPOT5)] <- NA
dim(flow)
dim(qPOT5)
Wmin <- which(extremes$Inun == min(extremes$Inun))
w <- Wmin[1]
flow <- ncvar_get(ncin, "dmflow", start=c(1,1,w), count=c(-1, -1, 1))
#image.plot(flow, x=0:700, y=0:1250)
flow[flow < t(as.matrix(qPOT5))] <- NA
image.plot(flow)
Wmin <- which(extremes$Inun == min(extremes$Inun))
w <- Wmin[1]
flow <- ncvar_get(ncin, "dmflow", sta
Wmin <- which(extremes$Inun == min(extremes$Inun))
w <- Wmin[1]
flow <- ncvar_get(ncin, "dmflow", start=c(1,1,w), count=c(-1, -1, 1))
image.plot(flow, x=0:700, y=0:1250)
Wmin <- which(extremes$Inun == min(extremes$Inun))
w <- Wmin[1]
flow <- ncvar_get(ncin, "dmflow", start=c(1,1,w), count=c(-1, -1, 1))
image.plot(flow, x=0:700, y=0:1250, asp=1)
Wmin <- which(extremes$Inun == min(extremes$Inun))
w <- Wmin[1]
flow <- ncvar_get(ncin, "dmflow", start=c(1,1,w), count=c(-1, -1, 1))
image.plot(flow, x=0:700, y=0:1250, asp=1, xlim=c(0,700), ylim=c(1250,0))
Wmin <- which(extremes$Inun == min(extremes$Inun))
w <- Wmin[1]
flow <- ncvar_get(ncin, "dmflow", start=c(1,1,w), count=c(-1, -1, 1))
image.plot(flow, x=0:700, y=0:1250, asp=1, xlim=c(0,700), ylim=c(1250,0), zlim=c(0,70))
#flow[flow < t(as.matrix(qPOT5))] <- NA
#image.plot(flow)
flow2 <- flow
image.plot(flow2)
image.plot(flow2)
flow2[flow < t(as.matrix(qPOT5))] <- -1
image.plot(flow2)
image.plot(qPOT5)
warnings()
image.plot(qPOT5)
image.plot(as.matrix(qPOT5))
qPOT5 <- as.matrix(read_csv(here::here(filepath), col_names=FALSE, na="-999"))
image.plot(t(qPOT5), zlim=c(0,1000), x=0:700, y=0:1250)
qPOT5 <- as.matrix(read_csv(here::here(filepath), col_names=FALSE, na="-999"))
image.plot(t(qPOT5), zlim=c(0,1000), x=0:700, y=0:1250)
filepath <- paste0("/Scoping/InterimData/qPOT_", events_per_year,
"epy_sans_mask.csv")
qPOT5 <- as.matrix(read_csv(here::here(filepath), col_names=FALSE, na="-999"))
image.plot(t(qPOT5), zlim=c(0,1000), x=0:700, y=0:1250)
filepath <- paste0("/Scoping/InterimData/qPOT_mask.csv")
qPOT5_mask <- read_csv(here::here(filepath), col_names=FALSE, na="-999")
image.plot(1*t(as.matrix(qPOT5_mask)), zlim=c(0,1), x=0:700, y=0:1250, ylim=c(1250,0))
image.plot(1*t(as.matrix(qPOT5_mask)), zlim=c(0,1), x=0:700, y=0:1250, ylim=c(1250,0), col=topos.colors(3))
image.plot(1*t(as.matrix(qPOT5_mask)), zlim=c(0,1), x=0:700, y=0:1250, ylim=c(1250,0), col=topo.colors(3))
Wmin <- which(extremes$Inun == min(extremes$Inun))
w <- Wmin[1]
flow <- ncvar_get(ncin, "dmflow", start=c(1,1,w), count=c(-1, -1, 1))
#image.plot(flow, x=0:700, y=0:1250, asp=1, xlim=c(0,700), ylim=c(1250,0), zlim=c(0,70))
flow2 <- flow
flow2[flow < t(as.matrix(qPOT5))] <- -1
image.plot(flow2)
Wmin <- which(extremes$Inun == min(extremes$Inun))
w <- Wmin[1]
flow <- ncvar_get(ncin, "dmflow", start=c(1,1,w), count=c(-1, -1, 1))
#image.plot(flow, x=0:700, y=0:1250, asp=1, xlim=c(0,700), ylim=c(1250,0), zlim=c(0,70))
flow2 <- flow
#flow2[flow < t(as.matrix(qPOT5))] <- -1
image.plot(flow2)
flow2[500:510, 600:610]
flow[500:510, 600:610]
flow[300:310, 600:610]
flow2[300:310, 600:610]
round(flow2[300:310, 600:610])
round(flow2[300:310, 600:610], 2)
round(qPOT5[300:310, 600:610], 2)
qPOT5 <- as.matrix(read_csv(here::here(filepath), col_names=FALSE, na="-999"))
round(qPOT5[300:310, 600:610], 2)
image.plot(flow2)
#flow2[flow < t(qPOT5)] <- -1
image.plot(qPOT5)
#flow2[flow < t(qPOT5)] <- -1
image.plot(1-t(qPOT5))
flow2 <- flow
#flow2[flow < t(qPOT5)] <- -1
image.plot(1-t(qPOT5), x=0:700, y=0:1250, ylim=c(1250,0), col=topo.colors(3))
range(qPOT5, na.rm=T)
Wmin <- which(extremes$Inun == min(extremes$Inun))
w <- Wmin[1]
flow <- ncvar_get(ncin, "dmflow", start=c(1,1,w), count=c(-1, -1, 1))
#image.plot(flow, x=0:700, y=0:1250, asp=1, xlim=c(0,700), ylim=c(1250,0), zlim=c(0,70))
flow2 <- flow
#flow2[flow < t(qPOT5)] <- -1
image.plot(1-t(qPOT5), x=0:700, y=0:1250, ylim=c(1250,0), zlim=c(-2, 1000), col=topo.colors(3))
Wmin <- which(extremes$Inun == min(extremes$Inun))
w <- Wmin[1]
flow <- ncvar_get(ncin, "dmflow", start=c(1,1,w), count=c(-1, -1, 1))
#image.plot(flow, x=0:700, y=0:1250, asp=1, xlim=c(0,700), ylim=c(1250,0), zlim=c(0,70))
flow2 <- flow
#flow2[flow < t(qPOT5)] <- -1
image.plot(1-t(qPOT5), x=0:700, y=0:1250, ylim=c(1250,0), zlim=c(-2, 2), col=topo.colors(3))
print(getwd())
print(here::here())
events_per_year <- 5
nonexceed <- 1 - (events_per_year/365)
inun_thresh <- 0.01
ncname_lin <-"/prj/ResilRiskInds/hmfg2g_runs/baseline_qx_setting/dmflow_out.nc"
ncname_win <- "K:/hmfg2g_runs/baseline_qx_setting/dmflow_out.nc"
# This file is ~36GB on the linux server.
if(substr(osVersion,1,3)=="Win"){
ncname <- ncname_win
}else{
ncname <- ncname_lin
}
ncin <- nc_open(ncname, readunlim=FALSE)
print("ncin open")
filepath <- paste0("/Scoping/InterimData/extremedates_", floor(inun_thresh*100),
"inun_", events_per_year, "epy.csv")
extremes <- read_csv(here::here(filepath), col_names=TRUE)
filepath <- paste0("/Scoping/InterimData/qPOT_", events_per_year,
"epy_sans_mask.csv")
qPOT5 <- as.matrix(read_csv(here::here(filepath), col_names=FALSE, na="-999"))
image.plot(t(qPOT5), zlim=c(0,1000), x=0:700, y=0:1250, ylim=c(1250,0))
filepath <- paste0("/Scoping/InterimData/qPOT_mask.csv")
qPOT5_mask <- read_csv(here::here(filepath), col_names=FALSE, na="-999")
image.plot(1*t(as.matrix(qPOT5_mask)), zlim=c(0,1), x=0:700, y=0:1250, ylim=c(1250,0), col=topo.colors(3))
plot(extremes)
Wmin <- which(extremes$Inun == min(extremes$Inun))
w <- Wmin[1]
flow <- ncvar_get(ncin, "dmflow", start=c(1,1,w), count=c(-1, -1, 1))
#image.plot(flow, x=0:700, y=0:1250, asp=1, xlim=c(0,700), ylim=c(1250,0), zlim=c(0,70))
flow2 <- flow
#flow2[flow < t(qPOT5)] <- -1
image.plot(1-t(qPOT5), x=0:700, y=0:1250, ylim=c(1250,0), col=topo.colors(3))
Wmin <- which(extremes$Inun == min(extremes$Inun))
w <- Wmin[1]
flow <- ncvar_get(ncin, "dmflow", start=c(1,1,w), count=c(-1, -1, 1))
#image.plot(flow, x=0:700, y=0:1250, asp=1, xlim=c(0,700), ylim=c(1250,0), zlim=c(0,70))
flow2 <- flow
#flow2[flow < t(qPOT5)] <- -1
image.plot(1-t(qPOT5), x=0:700, y=0:1250, ylim=c(1250,0), col=topo.colors(3))
image.plot(1-t(qPOT5), x=0:700, y=0:1250, ylim=c(1250,0))
#flow2[flow < t(qPOT5)] <- -1
image.plot(t(qPOT5), x=0:700, y=0:1250, ylim=c(1250,0))
range(qPOT5)
qPOT5[qPOT5 == -999] <- NA
image.plot(t(qPOT5), x=0:700, y=0:1250, ylim=c(1250,0))
range(qPOT5)
range(qPOT5, na.rm=T)
image.plot(t(qPOT5), x=0:700, y=0:1250, ylim=c(1250,-1))
Wmin <- which(extremes$Inun == min(extremes$Inun))
w <- Wmin[1]
flow <- ncvar_get(ncin, "dmflow", start=c(1,1,w), count=c(-1, -1, 1))
#flow2[flow < t(qPOT5)] <- -1
image.plot(flow, x=0:700, y=0:1250, ylim=c(1250,-1))
#image.plot(flow, x=0:700, y=0:1250, asp=1, xlim=c(0,700), ylim=c(1250,0), zlim=c(0,70))
flow2 <- duplicate(flow)
flow2 <- copy(flow)
flow2[flow2 < t(qPOT5)] <- NA
#flow2[flow < t(qPOT5)] <- -1
image.plot(flow2, x=0:700, y=0:1250, ylim=c(1250,-1))
flow2 <- flow
#flow2[flow < t(qPOT5)] <- -1
image.plot(flow2, x=0:700, y=0:1250, ylim=c(1250,-1))
flow2 < t(qPOT5)
dim(flow2)
dim(t(qPOT5))
which(flow2 < t(qPOT5))
which(flow2 < t(qPOT5), arr.ind=T)
flow2[which(flow2 < t(qPOT5))] <- NA
#flow2[flow < t(qPOT5)] <- -1
image.plot(flow2, x=0:700, y=0:1250, ylim=c(1250,-1))
flow2 <- flow
flow2 <- unname(flow)
which(flow2 < t(qPOT5))
WW <- which(flow2 < t(qPOT5))
WW <- which(flow2 < t(qPOT5), arr.ind=T)
flow2[WW[,1], WW[,2]] <- NA
#flow2[flow < t(qPOT5)] <- -1
image.plot(flow2, x=0:700, y=0:1250, ylim=c(1250,-1))
image.plot(t(qPOT5))
image.plot(flow2)
image.plot(flow)
image.plot(t(qPOT5))
WW <- which(flow < t(qPOT5), arr.ind=T)
WW <- which(flow < t(qPOT5), arr.ind=T)
flow2 <- flow
flow2[WW[,1], WW[,2]] <- NA
#image.plot(flow, x=0:700, y=0:1250, asp=1, xlim=c(0,700), ylim=c(1250,0), zlim=c(0,70))
#flow2[flow < t(qPOT5)] <- -1
image.plot(flow2, x=0:700, y=0:1250, ylim=c(1250,-1))
qPOT5 <- unname(qPOT5)
qPOT5 <- as.matrix(read_csv(here::here(filepath), col_names=FALSE, na="-999"))
qPOT5[qPOT5 == -999] <- NA
image.plot(t(qPOT5), zlim=c(0,1000), x=0:700, y=0:1250, ylim=c(1250,0))
image.plot(t(qPOT5), x=0:700, y=0:1250, ylim=c(1250,0))
image.plot(t(qPOT5), x=0:700, y=0:1250, ylim=c(1250,0))
library(raster)
library(ncdf4)
library(fields)
library(raster)
ncname_lin <-"/prj/ResilRiskInds/hmfg2g_runs/baseline_qx_setting/dmflow_out.nc"
ncname_win <- "K:/hmfg2g_runs/baseline_qx_setting/dmflow_out.nc"
# This file is ~36GB on the linux server.
if(substr(osVersion,1,3)=="Win"){
ncname <- ncname_win
}else{
ncname <- ncname_lin
}
ncin <- nc_open(ncname, readunlim=FALSE)
print("ncin open")
# Subset for testing
istart <- 1
Di <- 50
jstart <- 1
Dj <- 50
tstart <- 1
## Restrict to river network ---------
# `NA` is sea pixels, `-1` is not on the river network.
Dt <- 1
ncwide <- ncvar_get(ncin, "dmflow",
start=c(1,1,tstart), count=c(-1, -1, Dt))
print("ncwide get")
HasData <- which(apply(ncwide, c(1,2),
function(v){sum(v[!is.na(v)] > -1) == Dt}),
arr.ind=T)
NH <- nrow(HasData)
# HasData is important for gluing the events back in at the other end
# of the pipeline.
HD <- as.matrix(ncwide)
HD <- raster(ncwide)
extent(ncwide)
HD <- raster(ncwide)
plot(HD)
HD2 <- raster(x=ncname_win, layer=1)
plot(HD2)
dim(HD2)
extent(HD2)
HD[HD < 0] <- NA
plot(HD)
plot(HD, col=rainbow(24))
HD2[HD2<0] <- NA
plot(HD2, col=rainbow(24))
HD[HD > 0] <- 1
plot(HD2, col=rainbow(24))
HD2[HD2 > 0] <- 1
plot(HD2, col=rainbow(24))
plot(HD2, col=rainbow(3))
HD <- as.matrix(ncwide)
HD <- raster(x=ncname_win, layer=1)  # gets extent etc. automatically
HD[HD < 0] <- NA
HD[HD > 0] <- 1
writeRaster(HD, "./Scoping/InterimData/RiverNetwork.asc", format='ascii')
HX <- raster(x=ncname_win, layer=1)  # gets extent etc. automatically
HX[HX >= -1] <- 1
plot(HX)
HX[HX >= -1] <- -1
plot(HX)
writeRaster(HX, "./Scoping/InterimData/GBshape.asc", format="ascii")
HD <- raster(x=ncname_win, layer=1)  # gets extent etc. automatically
HD[HD < 0] <- NA
HD[HD >= 0] <- 1
writeRaster(HD, "./Scoping/InterimData/RiverNetwork.asc", format='ascii')
writeRaster(HD, "./Scoping/InterimData/RiverNetwork.asc", format='ascii',
overwrite=TRUE)
dim(HD)
summary(HD)
print(HD)
qpot_grid <- raster(x=ncfile, layer=1)
ncfile <- ncname_win
qpot_grid <- raster(x=ncfile, layer=1)
di <- seq(1, dim(qpot_grid)[1], by=step)
dj <- seq(1, dim(qpot_grid)[2], by=step)
dim(qpot_grid)
seq(1, dim(qpot_grid)[1], by=step)
step <- 50
seq(1, dim(qpot_grid)[1], by=step)
seq(1, dim(qpot_grid)[2], by=step)
i <- di[4]
di <- seq(1, dim(qpot_grid)[1], by=step)
dj <- seq(1, dim(qpot_grid)[2], by=step)
i <- di[4]
j <- dj[4]
tslice <- ncvar_get(ncin, varid="dmflow",
start=c(i, j,  1),
count=c(step, step, -1))
qpot <- apply(X=tslice, 3, FUN=quantile, probs=quant, na.rm=T,
names=FALSE)
quant = 1 - (5/365)
quant
qpot <- apply(X=tslice, 3, FUN=quantile, probs=quant, na.rm=T,
names=FALSE)
qpot_grid[i:(i+step), j:(j+step)] <- qpot
qpot_grid <- raster(x=ncfile, layer=1)
qpot <- apply(X=tslice, c(1,2), FUN=quantile, probs=quant, na.rm=T,
names=FALSE)
image(qpot)
di
di[4]
txtProgressBar(min=0, max=length(di)*length(dj), initial=0)
pb <- txtProgressBar(min=0, max=length(di)*length(dj), initial=0)
pb <- txtProgressBar(min=0, max=length(di)*length(dj), initial=0)
for(i in di){
for(j in dj){
# tslice <- ncvar_get(ncin, varid="dmflow",
#                     start=c(i, j,  1),
#                     count=c(step, step, -1))
qpot <- apply(X=tslice, c(1,2), FUN=quantile, probs=quant, na.rm=T,
names=FALSE)
qpot_grid[i:(i+step), j:(j+step)] <- qpot
setTxtProgressBar(pb, (i-1)*length(dj) + j)
}
}
warnings()
pb <- txtProgressBar(min=0, max=length(di)*length(dj), initial=0)
for(i in di){
for(j in dj){
# tslice <- ncvar_get(ncin, varid="dmflow",
#                     start=c(i, j,  1),
#                     count=c(step, step, -1))
qpot <- apply(X=tslice, c(1,2), FUN=quantile, probs=quant, na.rm=T,
names=FALSE)
qpot_grid[i:(i+step), j:(j+step)] <- qpot
setTxtProgressBar(pb, (i-1)*length(dj) + j)
}
}
close(pb)
dim(qpot_grid)
pb <- txtProgressBar(min=0, max=length(di)*length(dj), initial=0)
for(i in di){
for(j in dj){
# tslice <- ncvar_get(ncin, varid="dmflow",
#                     start=c(i, j,  1),
#                     count=c(step, step, -1))
qpot <- apply(X=tslice, c(1,2), FUN=quantile, probs=quant, na.rm=T,
names=FALSE)
qpot_grid[i:(i+step), j:(j+step), 1] <- qpot
setTxtProgressBar(pb, (i-1)*length(dj) + j)
}
}
close(pb)
di <- seq(1, dim(qpot_grid)[1], by=step)
dj <- seq(1, dim(qpot_grid)[2], by=step)
pb <- txtProgressBar(min=0, max=length(di)*length(dj), initial=0)
for(i in di){
for(j in dj){
# tslice <- ncvar_get(ncin, varid="dmflow",
#                     start=c(i, j,  1),
#                     count=c(step, step, -1))
qpot <- apply(X=tslice, c(1,2), FUN=quantile, probs=quant, na.rm=T,
names=FALSE)
qpot_grid[i:(i+step), j:(j+step), 1] <- qpot
setTxtProgressBar(pb, (i-1)*length(dj) + j)
}
}
close(pb)
length(di)*length(dj)
(i-1)*length(dj) + j
i
j
i <- 4
j <- 4
(i-1)*length(dj) + j
i:(i+step)
i <- di[4]
j <- di[4]
(i-1)*length(dj) + j)
(i-1)*length(dj) + j
plot(HX)
plot(HD2)
plot(qpot_grid)
pb <- txtProgressBar(0, length(di)*length(dj))
k <- 0
for(i in di){
for(j in dj){
# tslice <- ncvar_get(ncin, varid="dmflow",
#                     start=c(i, j,  1),
#                     count=c(step, step, -1))
qpot <- apply(X=tslice, c(1,2), FUN=quantile, probs=quant, na.rm=T,
names=FALSE)
qpot_grid[i:(i+step), j:(j+step), 1] <- qpot
k <- k+1
setTxtProgressBar(pb, k)
}
}
close(pb)
qpot <- apply(X=tslice, c(1,2), FUN=quantile, probs=quant, na.rm=T,
names=FALSE)
qpot_grid[i:(i+step), j:(j+step), 1] <- qpot
i
i:i+step
i+(0:(step-1))
qpot_grid[i+(0:(step-1)), j+(0:(step-1)), 1] <- qpot
qpot_grid[1:5, 1:5] <- 5
plot(qpot_grid)
qpot_grid[1:5, 1:5] <- 500
plot(qpot_grid)
qpot_grid[1:5, 1:5] <- NA
plot(qpot_grid, col=rainbow(24))
dim(qpot_grid)
di
i <- 9
i <- di[9]
j <- dj[9]
qpot <- apply(X=tslice, c(1,2), FUN=quantile, probs=quant, na.rm=T,
names=FALSE)
tslice <- ncvar_get(ncin, varid="dmflow",
start=c(i, j,  1),
count=c(step, step, -1))
qpot <- apply(X=tslice, c(1,2), FUN=quantile, probs=quant, na.rm=T,
names=FALSE)
qpot_grid[i+(0:(step-1)), j+(0:(step-1)), 1] <- qpot
qpot_grid[i+(0:(step-1)), j+(0:(step-1)), 1]
dim(qpot)
qpot_grid[i+(0:(step-1)), j+(0:(step-1)), 1]
qpot_grid[i+(0:(step-1)), j+(0:(step-1)), 1] <- qpot
qpot_grid[1:50, 1:50] <- qpot
qpot_grid[i+(0:(step-1)), j+(0:(step-1))] <- qpot
plot(qpot_grid, col=rainbow(24))
di <- seq(1, dim(qpot_grid)[1], by=step)
dj <- seq(1, dim(qpot_grid)[2], by=step)
pb <- txtProgressBar(0, length(di)*length(dj))
k <- 0
for(i in di){
for(j in dj){
# tslice <- ncvar_get(ncin, varid="dmflow",
#                     start=c(i, j,  1),
#                     count=c(step, step, -1))
qpot <- apply(X=tslice, c(1,2), FUN=quantile, probs=quant, na.rm=T,
names=FALSE)
qpot_grid[i+(0:(step-1)), j+(0:(step-1))] <- qpot
k <- k+1
setTxtProgressBar(pb, k)
}
}
close(pb)
length(di)
length(dj)
25*14
1 - (5/365)
qpot_extract_full <- function(ncfile, varid, quant, step=50){
qpot_grid <- raster(x=ncfile, layer=1)
di <- seq(1, dim(qpot_grid)[1], by=step)
dj <- seq(1, dim(qpot_grid)[2], by=step)
pb <- txtProgressBar(0, length(di)*length(dj))
k <- 0
for(i in di){
for(j in dj){
tslice <- ncvar_get(ncin, varid="dmflow",
start=c(i, j,  1),
count=c(step, step, -1))
qpot <- apply(X=tslice, c(1,2), FUN=quantile, probs=quant, na.rm=T,
names=FALSE)
qpot_grid[i+(0:(step-1)), j+(0:(step-1))] <- qpot
k <- k+1
setTxtProgressBar(pb, k)
}
}
close(pb)
return(qpot_grid)
}
QP99 <- qpot_extract_full(ncin, "dmflow", 0.99, step=50)
QP99 <- qpot_extract_full(ncname_win, "dmflow", 0.99, step=50)
