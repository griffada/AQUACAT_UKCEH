cdfPrimer(RCM=RCM, period=period, method="HT", NE=ncol(eventflow)-4,
NH=NH1, thresh1, ws1, rn[r1,], savepath)
ht_events <- nc_open(savepath, write=T)
ncvar_put(ht_events, "flow", as.matrix(eventflow[,-(1:4)]))
source('S:/CodeABG/csvToCdf_HT.R')
eventSummaryLine <- function(obs_events, i, threshold, r1=1:19914){
ni <- eventNo[i]
vvec <- sum(
(ncvar_get(obs_events, "flow", start=c(1,i), count=c(-1,1)) > threshold),
na.rm=T)
avec <- ncvar_get(obs_events, "ape", start=c(1,i), count=c(-1,1))
min_dvec <- min(
ncvar_get(obs_events, "dpe", start=c(1,i), count=c(-1,1)),
na.rm=T)
D <- eventDayList[[jT]][[jW]][ni]
L <- eventLList[[jT]][[jW]][ni]
ncl <- nclustevent(avec < (1-exp(-2)))
pk <- peakyfun(avec, (1-exp(-2)))
return(list(i, D, L, vvec, min(avec), min_dvec, season(D), ncl, pk))
}
if(interactive()){commandArgs <- function(...){c("04","future", "NW")}}
#### SETUP ####----------------------
if(substr(osVersion,1,3) == "Win"){
source("S:/CodeABG/setup_script_00.R")
}else if (substr(osVersion,1,3) == "Fed"){
source("/prj/aquacat/CodeABG/setup_script_00.R")
}else{
source("~/AQUACAT/CodeABG/setup_script_00.R")
}
regions <- c("ANG", "ESC", "NE", "NSC", "NW", "SE", "SEV", "SSC", "SW",
"THA", "TRE", "WAL")
REGIONS <- c("NW")
rn <- as.data.frame(rn)
r1 <- which(rn_regions$REGION == REGIONS[1])
nclustevent <- function(v, radii=50) {
# This function estimates the number of "seperate clusters" of event going on during
# a widespread event.
ne0 <- sum(v, na.rm=T)
event1 <- rbind(as.matrix(rn[r1,][v,]), matrix(c(
700, 0, 700000, 1000000
), nrow = 1))
d <- dist(event1[, 1:2])
d2 <- dist(event1[1:ne0, 1:2])
if ((max(d2) > radii) & (ne0 >= 10)) {
hh <- hclust(d, method = "single")
ch <- max(cutree(hh, h = 0.8 * sort(hh$height, decreasing = T)[2])) - 1
if(sort(hh$height,decreasing=T)[2] < 0.2*max(hh$height)){
ch <- 1
}
ch <- min(ch, 4)
} else{
ch <- 1
}
ch
}
peakyfun <- function(v, thr) {
mn <- min(v, na.rm=T)
if (mn > thr | mn > 1e8) {
return(0)
}else{
mn50 <- mean(c(mn, thr))
return(sum(v < mn50) / sum(v < thr))
}
}
threshMat <- readRDS(paste0(data_wd, subfold, "threshMat_RCM",
RCM, suffix, ".rds"))
load(paste0(data_wd, subfold, "eventLists_RCM", RCM, suffix, ".RDa"))
REG="NW"
r1 <- which(rn_regions$REGION == REG)
obs_events <- nc_open(paste0(data_wd,subfold, "/", REG, "/",
"eventOBS_region_", REG, "_RCM", RCM, suffix, ".nc"))
NN <- obs_events$dim$event$len
eventSummaryFrame <- data.frame(eventNumber=numeric(NN),
eventDay=numeric(NN),
eventLength = numeric(NN),
area = numeric(NN),
peakA = numeric(NN),
peakD = numeric(NN),
season = character(NN),
nclusters = numeric(NN),
peakyness = numeric(NN),
stringsAsFactors = FALSE)
# (D %/% 90) %% 4 for season 0,1,2,3: DJF, MAM, JJA, SON
season <- function(D) switch(((D %/% 90) %% 4) + 1, "DJF", "MAM", "JJA", "SON")
ST <- Sys.time()
ST0 <- Sys.time()
eventNo <- ncvar_get(obs_events, "eventNo")
i=1
eventSummaryFrame[i,] <- eventSummaryLine(obs_events, i, threshMat[r1,jT])
debug(eventSummaryLine)
eventSummaryFrame[i,] <- eventSummaryLine(obs_events, i, threshMat[r1,jT])
D#
ni
i
eventNo[1:10]
avec[1:10]
if(interactive()){
commandArgs <- function(...){c("04","future","NW")}
}
#### SETUP ####----------------------------------------------------------
if(substr(osVersion,1,3) == "Win"){
source("S:/CodeABG/setup_script_00.R")
}else if (substr(osVersion,1,3) == "Fed"){
source("/prj/aquacat/CodeABG/setup_script_00.R")
}else{
source("~/AQUACAT/CodeABG/setup_script_00.R")
}
if(interactive()){
commandArgs <- function(...){c("04","future","NW")}
}
#### SETUP ####----------------------------------------------------------
if(substr(osVersion,1,3) == "Win"){
source("S:/CodeABG/setup_script_00.R")
}else if (substr(osVersion,1,3) == "Fed"){
source("/prj/aquacat/CodeABG/setup_script_00.R")
}else{
source("~/AQUACAT/CodeABG/setup_script_00.R")
}
library(ilaprosUtils)
1/0.0072
if(interactive()){commandArgs <- function(...){c("01","present")}}
#### SETUP ####----------------------
if(substr(osVersion,1,3) == "Win"){
source("S:/CodeABG/setup_script_00.R")
}else if (substr(osVersion,1,3) %in% c("Cen","Fed")){
source("/prj/aquacat/CodeABG/setup_script_00.R")
}else{
source("~/AQUACAT/CodeABG/setup_script_00.R")
}
##### SETUP #####---------------------------------------------------
suppressPackageStartupMessages({
library(extRemes)
library(dplyr)
library(fitdistrplus)
library(parallel)
library(foreach)
library(ilaprosUtils)
library(lmomco)
})
### DATA --------------------------
print(paste("Running for threshold", thresh1, "at", ws1, "minimum spread."))
print(paste("RCM", RCM, "period", period))
suffix_pres <- "_198012_201011"
subfold_pres <- paste0("RCM", RCM, suffix_pres, "/")
ncpres <- paste0(g2g_wd, "dmflow_RCM", RCM, suffix_pres, "_out.nc")
ncin_pres <- nc_open(ncpres)
threshMat <- readRDS(paste0(data_wd, subfold,"threshMat_RCM",
RCM, suffix,".rds"))
obs_events  <- nc_open(paste0(data_wd,subfold,"eventOBS_",thresh1, "_", ws1,
"_RCM", RCM, suffix, ".nc"))
NE <- sum(ncvar_get(obs_events, "eventNo")>0)
NH <- nrow(rn)
partable    <- readdf(paste0(data_wd,subfold,"paramtableG_",thresh1,
"_RCM", RCM, suffix, ".csv"))
partable_pres <- readdf(paste0(data_wd,subfold_pres,
"paramtableG_", thresh1, "_RCM", RCM, suffix_pres, ".csv"))
ec_events <- nc_open(paste0(data_wd, subfold, "eventEC_",
thresh1,"_", ws1, "_RCM", RCM, suffix, ".nc"), write=T)
gpa_tracker <- c()
gpa_worst <- c()
EN <- sum(ncvar_get(ec_events, "eventNo")>0)
EN
h=1
thr <- threshMat[h,jT]
meanInt <- partable$meanint[h]
thresholdH <- partable$threshold[h]
locH <- partable$loc[h]
scaleH <- partable$sca[h]
shapeH <- partable$shape[h]
vals <- ncvar_get(ncin_pres, "dmflow",
start=c(rn$row[h], rn$col[h], 1),
count=c(1, 1, -1))
obs_flow <- ncvar_get(ec_events, "flow",
start=c(h,1), count=c(1,EN))
da <- dpeApeComputer(h,
vals,
obs_flow,
ncin=ec_events,
pars=vec2par(c(locH,scaleH,shapeH), type='glo'),
thresh_val=threshMat[h,jT])
gpa_tracker[h] <- da[1]
gpa_worst[h] <- da[2]
threshMat[h, jT]
range(obs_flow)
range(obs_flow, na.rm=T)
eventNo[1:10]
NNN = ncvar_get(ec_events, "eventNo")
NNN[1:10]
if(interactive()){commandArgs <- function(...){c("01","present")}}
#### SETUP ####----------------------
if(substr(osVersion,1,3) == "Win"){
source("S:/CodeABG/setup_script_00.R")
}else if (substr(osVersion,1,3) %in% c("Cen","Fed")){
source("/prj/aquacat/CodeABG/setup_script_00.R")
}else{
source("~/AQUACAT/CodeABG/setup_script_00.R")
}
##### SETUP #####---------------------------------------------------
suppressPackageStartupMessages({
library(extRemes)
library(dplyr)
library(fitdistrplus)
library(parallel)
library(foreach)
library(ilaprosUtils)
library(lmomco)
})
### DATA --------------------------
print(paste("Running for threshold", thresh1, "at", ws1, "minimum spread."))
print(paste("RCM", RCM, "period", period))
suffix_pres <- "_198012_201011"
subfold_pres <- paste0("RCM", RCM, suffix_pres, "/")
#ncpres <- paste0(g2g_wd, "dmflow_RCM", RCM, suffix_pres, "_out.nc")
readdf <- function(...){as.data.frame(data.table::fread(...))}
# matrix of threshold value (col) at a given cell (row)
threshMat <- readdf(paste0(data_wd, subfold,"threshMat_RCM",
RCM, suffix,".csv"))
#dim(threshMat) #19914 x 5
NH <- nrow(rn)
# timewise maxima at each cell for each event ((NE + 4) x NH)
obs_events  <- nc_open(paste0(data_wd,subfold,"eventOBS_",thresh1, "_", ws1,
"_RCM", RCM, suffix, ".nc"))
partable    <- readdf(paste0(data_wd,subfold,
"paramtableG_",thresh1, "_RCM", RCM, suffix, ".csv"))
partable_pres <- readdf(paste0(data_wd,subfold,
"paramtableG_", thresh1, "_RCM", RCM, suffix, ".csv"))
NE <- obs_events$dim$event$len
savepath <- paste0(data_wd, subfold, "eventEC2_",
thresh1,"_", ws1, "_RCM", RCM, suffix, ".nc")
cdfPrimer(RCM, period, "EC2", NE=Msims, NH, thresh1, ws1, rn, savepath,
chunks=T)
ec_events <- nc_open(savepath, write=T)
flow_glo <- function(v, params, eventthresh, OBS){
flow <- rep(0, length(v))
up <- v < 1-eventthresh
LM <- lmoms(OBS[OBS>params$threshold])
if (sum(OBS > params$threshold) < 12){
up[] <- FALSE
} else if (!are.lmom.valid(LM)){
up[] <- FALSE
} else if (!are.parglo.valid(parglo(LM))){
up[] <- FALSE
}
if(any(up)){
setpars <- parglo(LM)
flow[up] <- quaglo(1 - (v[up])/(1-eventthresh), setpars)
up[flow < params$threshold] <- FALSE
}
if(any(!up)) flow[!up] <- quantile(OBS, 1-v[!up])
flow[flow < 0] <- 1e-5
flow
}
betacop <- function(NE, NH, dM, rankevents, thresholds=(2/360), mincov=0.002){
U <- matrix(runif(NH * NE), nrow = NH, ncol = NE) #NHxNE
V <- apply(U, 1, sort) # This is the slow bit.
V <- sapply(1:NH, function(i){V[rankevents[i, ], i]})
ap <- apply(V, 1, function(v){sum(v < thresholds)})
w0 <- which(ap >= (mincov*NH))
if(length(w0) < dM){w0 <- c(rep(w0, ceiling(dM/length(w0))))}
w <- sample(w0, dM, replace=F)
Vnew0 <- t(V[w, ])
#print(ap)
return(list(newEventDraw=w, Vnew0=Vnew0))
}
print("Simulating new events")
Msims <- 20
dM <- 5 #number of draws per tester; keep small.
M <- Msims - (Msims%%dM)
print(paste("> > > > > > M = ", M))
newEventDraw <- c()
obs_slice <- ncvar_get(obs_events, "flow") #NH x NE
obs_thresh <- 1 - sapply(1:NH,
function(i){ecdf(obs_slice[i,])(threshMat[i,jT])})
dim(obs_slice)
obs_slice[1:4,1:4]
obs_thresh
threshMat[1,jT]
range(obs_slice[1,])
ecdf(obs_slice[1,])(26.07)
rank_events <- t(apply(-obs_slice, 1, rank, ties.method = "random"))
Vnew1 <- foreach(m = 1:(M/dM)) %do% {
if(m %% 200 == 0){print(paste0(m,"/",M))}
B <- betacop(NE, NH, dM, rank_events, thresholds=obs_thresh, mincov=0.0008)
newEventDraw <<- c(newEventDraw, B$newEventDraw)
B
}
Vnew <- do.call(cbind, lapply(Vnew1, function(v){v$Vnew0}))
newEventDraw <- do.call(c, lapply(Vnew1, function(v){v$newEventDraw}))
range(Vnew)
newEventDraw
h=500
obs_location <- obs_slice[h,]
o <- try(
flow_glo(Vnew[h, ],
params = partable[h, ],
eventthresh = ecdf(obs_location)(partable$threshold[h]),
OBS = obs_location)
)
o
range(obs_slice)
range(obs_slice[h,])
range(Vnew[h,])
ecdf(obs_location)(partable$threshold[h])
debug(flow_glo)
flow_glo(Vnew[h, ],
params = partable[h, ],
eventthresh = ecdf(obs_location)(partable$threshold[h]),
OBS = obs_location)
sum(up)
eventthresh
v[up]
v[!up]
params$threshold
OBS[OBS>params$threshold]
flow[up]
cdfglo(28.1, setpars)
params$threshold
range(obs_slice)
range(obs_slice[h,])
range(o)
Vextra <- matrix(NA, NH, M)
for(h in 1:NH){
if(h < 10 | h %% 1000 == 0){print(h)}
obs_location <- obs_slice[h,]
o <- try(
flow_glo(Vnew[h, ],
params = partable[h, ],
eventthresh = ecdf(obs_location)(partable$threshold[h]),
OBS = obs_location)
)
if(inherits(o, c("Error", "try-error"))){
print(h)
print(o)
}else{
o <- unlist(o)
Vextra[h,] <- o
#ncvar_put(ec_events, "flow", unlist(o), start=c(h,1), count=c(1,Msims))
}
}
undebug(flow_glo)
Vextra <- matrix(NA, NH, M)
for(h in 1:NH){
if(h < 10 | h %% 1000 == 0){print(h)}
obs_location <- obs_slice[h,]
o <- try(
flow_glo(Vnew[h, ],
params = partable[h, ],
eventthresh = ecdf(obs_location)(partable$threshold[h]),
OBS = obs_location)
)
if(inherits(o, c("Error", "try-error"))){
print(h)
print(o)
}else{
o <- unlist(o)
Vextra[h,] <- o
#ncvar_put(ec_events, "flow", unlist(o), start=c(h,1), count=c(1,Msims))
}
}
nc_close(ec_events)
-log(1-(0.02))/360
1 - exp(-360*5.6e-5)
1/(1 - exp(-360*5.6e-5))
?ifelse
?if_else
library(dplyr)
?if_else
a <- rep(1,5)
b <- c(0.5,0.5,1.5,1.5,2)
if_else(b < 1, pmin(a,b), (a+b)/2)
mean(a,b)
?pmean
??geometric
sqrt(a*b)
if_else(b < 1, pmin(a,b), sqrt(a*b))
sqrt(10*1000)
sqrt(100*10000)
sqrt(100*5000)
(100+5000)/2
(100+300)/2
sqrt(100*300)
sqrt(55*75)
sqrt(0.0001 * 0.01)
