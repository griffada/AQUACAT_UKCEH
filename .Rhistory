print(range(evNo, na.rm=T))
}
}
RCMS <- c("01","04","05","06","07","08","09","10","11","12","13","15")
for(RCM in RCMS){
for(j in 1:2){
period <- c("present","future")[j]
suffix <- c("_198012_201011", "_205012_208011")[j]
if(FF_flag){
subfold <- paste0("RCM", RCM, suffix, "_FF/")
}else{
subfold <- paste0("RCM", RCM, suffix, "/")
}
savepath <- paste0(data_wd, subfold, REG, "/eventHT_",REG,"_",
thresh1,"_", ws1, "_RCM", RCM, suffix, ".nc")
try({
ht_events <- nc_open(savepath, write=T)
evNo <- ncvar_get(ht_events, "eventNo")
print(savepath)
print(range(evNo, na.rm=T))
})
}
}
print("running 106N")
if(interactive()){commandArgs <- function(...){c("05","present")}}
##### SETUP #####------------------------------------------------------------
suppressMessages({
library(extRemes)
library(lmomco)
})
if(substr(osVersion,1,3) == "Win"){
source("S:/CodeABG/setup_script_00.R")
}else if (substr(osVersion,1,3) %in% c("Cen","Fed")){
source("/prj/aquacat/CodeABG/setup_script_00.R")
}else{
source("~/AQUACAT/CodeABG/setup_script_00.R")
}
ncpres <- paste0(g2g_wd, "dmflow_RCM", RCM, suffix, "_out.nc")
ncin_pres <- nc_open(ncpres)
suffix_pres <- "_198012_201011"
# matrix of threshold value (col) at a given cell (row)
threshMat <- readRDS(paste0(data_wd, subfold, "threshMat_RCM",
RCM, suffix, ".rds"))
# eventLList length of event L,
# eventDayList start of event L, NT lists of NW lists
load(paste0(data_wd, subfold, "eventLists_RCM", RCM, suffix, ".RDa"))
# timewise maxima at each cell for each event (NE x NH)
nc_events <- nc_open(paste0(data_wd,subfold, "eventOBS_",
thresh1,"_", ws1,"_RCM", RCM, suffix, ".nc"),
write=TRUE)
NE <- sum(ncvar_get(nc_events, "eventNo") > 0)
partable <- readdf(paste0(data_wd,subfold,
"paramtableG_",thresh1, "_RCM", RCM, suffix, ".csv"))
# if(period=="future"){
#   partable <- readdf(paste0(data_wd, subfold,
#                             "paramtableP_", thresh1, "_RCM", suffix_pres, ".csv"))
# }
gpa_tracker <- c()
gpa_worst   <- c()
ST0 <- Sys.time()
ST  <- Sys.time()
h=2
thr        <- threshMat[h,jT]
thresholdH <- partable$threshold[h]
# Full timeseries for location
vals <- ncvar_get(ncin_pres, "dmflow",
start=c(rn$row[h], rn$col[h], 1),
count=c(1, 1, -1))
# Only event summaries at location
obs_events <- ncvar_get(nc_events, "flow",
start=c(h, 1), count=c(1, -1))
debug(dpeApeComputer)
# Compute and store Daily and Annual PoE
da <- dpeApeComputer(h=h,
vals=vals,
obs_events=obs_events,
ncin=nc_events,
pars=partable[h,],
thresh_val=thresholdH)
mid_changept
glim <- c(quaglo((1-mid_changept), parsGL), quagpa(1-mid_changept, parsGP))
glim
glim[glim==max(glim)] = 1.05*max(glim)
glim
glim[glim==min(glim)] = 0.95*min(glim)
glim
lint <- approx(glim,
c(1-cdfglo(glim[1], parsGL), 1-cdfgpa(glim[2], parsGP)),
xout=obs_events)
lint
1-cdfglo(glim[1], parsGL)
1-cdfgpa(glim[2], parsGP)
lint$y[lint$x < min(glim)] <- 0.1*min(c(1e-10,lint$y), na.rm=T)
lint$y[lint$x > max(glim)] <- 2
lint
pmax(pmin(glo_poe0, gpa_poe0), pmin(lint$y, gpa_geom))
pmax(pmin(ann_glo, ann_gpa), pmin(lint$y, ann_geom))
pmax(pmin(ann_glo$ape, ann_gpa$ape), pmin(lint$y, ann_geom))
min(ann_glo)
min(ann_glo$ape)
min(ann_gpa$ape)
range(ann_gpa)
all(ann_glo$ape == ann_gpa$ape)
# Compute and store Daily and Annual PoE
da <- dpeApeComputer(h=h,
vals=vals,
obs_events=obs_events,
ncin=nc_events,
pars=partable[h,],
thresh_val=thresholdH)
d2a <- function(ecdp, poe, thresh_val, obs, pot2=POT2){
poe[is.na(poe)] <- 1
wh_ext <- (obs > pot2) #& (poe < ecdp)
wh_ext[is.na(wh_ext)] <- FALSE
poe[wh_ext] <- poe[wh_ext]*(1 - ecd(thresh_val))
poe[!wh_ext] <- ecdp[!wh_ext]
ape <- 1 - exp(-360*poe)
ape[is.na(ape)] <- 1
ape[ape < 1/5000] <- 1/5000
poe[poe < -log(1-(1/5000))/360] <- -log(1-(1/5000))/360
return(list(ape=ape, poe=poe))
}
ann_glo <- d2a(ecd_poe, glo_poe0, thresh_val, obs_events)
ann_gpa <- d2a(ecd_poe, gpa_poe0, thresh_val, obs_events)
all(ann_glo$ape == ann_gpa$ape)
sum(ann_glo$ape != ann_gpa$ape)
glim <- c(quaglo((1-mid_changept), parsGL), quagpa(1-mid_changept, parsGP))
glim[glim==max(glim)] = 1.05*max(glim)
lint <- approx(glim,
c(1-cdfglo(glim[1], parsGL), 1-cdfgpa(glim[2], parsGP)),
xout=obs_events)
lint$y[lint$x < min(glim)] <- 0.1*min(c(1e-10,lint$y), na.rm=T)
lint$y[lint$x > max(glim)] <- 2
lint
gpa_li <- pmax(pmin(ann_glo$ape, ann_gpa$ape), pmin(lint$y, ann_geom))
gpa_li
plot(obs_events, ann_glo)
plot(obs, ann_glo)
length(obs_events)
length(ann_glo$ape)
plot(obs, ann_glo$ape)
plot(obs_events, ann_glo$ape)
points(obs_events, ann_gpa$ape, col=2)
plot(obs_events, ann_glo$ape, log='y')
points(obs_events, ann_gpa$ape, col=2)
plot(obs_events, ann_glo$ape, log='y', ylim=c(1e-5,1))
points(obs_events, ann_gpa$ape, col=2)
points(obs_events, gpa_li, col=3)
abline(h=0.02)
lint
glim
obs_events
quaglo(1-mid_prob, parsGL)
mid_prob
(1-mid_changept)/(1 - ecd(thresh_val))
mid_changept
ecd(thresh_val)
1-ecd(thresh_val)
1-mid_changept
mid_changept
mid_changept/(1- ecd(thresh_val))
mid_prob <- mid_changept/(1- ecd(thresh_val))
quaglo(mid_prob, parsGL)
quaglo(mid_prob, parsGP)
quagpa(mid_prob, parsGP)
mid_prbo
mid_prob
mid_prob
# # The harmonic mean errs towards the smaller of the two
# # (HM(10,1000)=100, AM(10,1000) = 505)
#
glim <- c(quaglo(mid_prob, parsGL), quagpa(mid_prob, parsGP))
glim
glim[glim==max(glim)] = 1.025*max(glim)
glim[glim==min(glim)] = 0.975*min(glim)
glim
lint <- approx(glim,
c(1-cdfglo(glim[1], parsGL), 1-cdfgpa(glim[2], parsGP)),
xout=obs_events)
lint$y[lint$x < min(glim)] <- 0.1*min(c(1e-10,lint$y), na.rm=T)
lint$y[lint$x > max(glim)] <- 2
lint
gpa_li <- pmax(pmin(ann_glo$ape, ann_gpa$ape), pmin(lint$y, ann_geom))
points(obs_events, gpa_li, col=4)
points(obs_events, ecd_poe*(1-ecd(threshval)), col="orange", pch=".")
points(obs_events, ecd_poe*(1-ecd(thresh_val)), col="orange", pch=".")
points(obs_events, (1-ecd_poe)*(1-ecd(thresh_val)), col="orange", pch=".")
points(obs_events, ecd_poe*(1-ecd(thresh_val)), col="orange", pch=".")
points(obs_events, ecd_poe, col="orange", pch=".")
points(obs_events, 1 - exp(-360*ecd_poe), col="orange", pch=".")
points(obs_events, 1 - exp(-360*ecd_poe), col="orange", pch="x")
sort(1-exp(-360*ecd_poe), decreasing = T)
sort(1-exp(-360*ecd_poe), decreasing = T)[1:10]
sort(1-exp(-360*ecd_poe))[1:10]
sort(ecd_poe)[1:10]
ecd <- ecdf(c(-1,vals,1e8))
sort(1 - ecd(obs_events))[1:10]
sort(obs_events, decreasing=T)[1:10]
ecd(82.2824)
1- ecd(82.2824)
1- ecd(49.2946)
?ecdf
sum(vals > 49.2946)
sum(vals >= 49.2946)
sum(vals > 49)
sum(vals > 49.2)
abline(v=thresh_val)
abline(h=pot2)
abline(h=POT2)
POT2
abline(v=POT2)
plot(obs_events, ann_glo$ape, log='y', ylim=c(3e-2,1))
points(obs_events, ann_gpa$ape, col=2)
points(obs_events, gpa_li, col=3)
plot(obs_events, ann_glo$ape, log='y', ylim=c(3e-3,1))
points(obs_events, ann_gpa$ape, col=2)
points(obs_events, gpa_li, col=3)
plot(obs_events, ann_glo$ape, log='y', ylim=c(3e-3,1), xlim=c(20,90))
points(obs_events, ann_gpa$ape, col=2)
points(obs_events, gpa_li, col=3)
plot(obs_events, ann_glo$ape, log='y', ylim=c(6e-3,1), xlim=c(20,90))
points(obs_events, ann_gpa$ape, col=2)
points(obs_events, gpa_li, col=3)
plot(obs_events, ann_glo$ape, log='y', ylim=c(1e-2,1), xlim=c(20,90))
points(obs_events, ann_gpa$ape, col=2)
points(obs_events, gpa_li, col=3)
plot(obs_events, ann_glo$ape, log='y', ylim=c(1e-2,1), xlim=c(20,90))
points(obs_events, ann_gpa$ape, col=2)
points(obs_events, gpa_li, col=3)
points(obs_events, 1 - exp(-360*ecd_poe), col="orange", pch="x")
if(interactive()){
commandArgs <- function(...){c("06","present","NW")}
}
if(substr(osVersion,1,3) == "Win"){
source("S:/CodeABG/setup_script_00.R")
}else{
source("/prj/aquacat/CodeABG/setup_script_00.R")
}
regions <- c("ANG", "ESC", "NE", "NSC", "NW", "SE", "SEV", "SSC", "SW", "THA", "TRE", "WAL")
if(length(args)==3){
RCM <- sprintf("%02d",as.numeric(args[1]))
period <- args[2]
if(period=="present"){
suffix <- "_198012_201011"
}else if (period=="future"){
suffix <- "_205012_208011"
}
REG <- args[3]
if(!any(REG == regions)){
stop(paste("incorrect call: Rscript 109_HeffTawn_Modelling.R gcm period region \n",
"- Region must be one of: ANG, ESC, NE, NSC, NW, SE, SEV, SSC, SW, THA, TRE, WAL."))
}
}
##### SETUP #####-----------------------------------------------------------
suppressPackageStartupMessages({
library(texmex)
library(dplyr)
library(extRemes)
library(reshape2)
library(tidyverse)
})
source(paste0(wd,"07d_texmex_slimline.R"))
REG <- "NW"
nSample <-settings$nSampleHT #<<<<<<<<< see setup_script_00
if(!settings$HTstructure){print("RECOMPUTING TEXMEX")}
ST <- Sys.time()
# ws1 <- "pc05"
# thresh1 <- "POT2"
# jT <- which(threshName==thresh1)
# jW <- which(wsName == ws1)
print(paste0("Running for threshold ", thresh1, " at ", ws1, " minimum spread."))
# lists of which days different thresholds were exceeded at different points
# NT lists of NW lists
threshDayExcList <- readRDS( paste0(data_wd, subfold, "threshDayExcList_RCM",
RCM, suffix,".rds"))
# matrix of threshold value (col) at a given cell (row)
threshMat <- readRDS(paste0(data_wd, subfold,"threshMat_RCM",
RCM, suffix,".rds"))
load(paste0(data_wd, subfold, "eventLists_RCM", RCM, suffix, ".RDa"))
# timewise maxima at each cell for each event (NE x NH)
#library(data.table)
#edf <- fread(paste0(wd,"/Data/eventdf_POT2_pc2.csv"), colClasses=rep("numeric",287))
obs_events <- nc_open(paste0(data_wd,subfold, REG,"/eventOBS_region_",
REG, "_RCM", RCM, suffix, ".nc"))
REG <- REG
r1 <- which(rn_regions$REGION == REG)
NREG <- length(r1)
thresh0 <- unlist(threshMat[r1,jT], use.names=FALSE)
marginfns_temp <- list("laplace",
p2q = function(p) ifelse(p <  0.5, log(2 * p), -log(2 * (1 - p))),
q2p = function(q) ifelse(q <  0, exp(q)/2, 1 - 0.5 * exp(-q)))
MODELS <- readRDS(paste0(data_wd, subfold, REG, "/marginal_models.rds"))
ST <- Sys.time()
DATA <- ncvar_get(obs_events, "flow") %>% as.data.frame()# %>% t()
rownames(DATA) <- ncvar_get(obs_events, "eventNo")
mqu <- 0.75
dqu <- 0.8
marginals <- migpd_slim(mqu=mqu, penalty="none", verbose=F)
# str(step1_test1, max.level=1)
mth_in <- marginals$mth
mqu_in <- marginals$mqu
# Marginal models using Generalised Pareto distribution.
MODELS <- marginals$models
#}
print("Step 1 completed: Marginal models.")
#Transform DATA into Laplace distribution
TRANSFORMED <- mexTransform_slim(marginfns=marginfns_temp, mth=mth_in,
method="mixture", r=NULL)$TRANSFORMED
saveRDS(list(marginals$models, mth_in, mqu_in),
file=paste0(data_wd, subfold, REG, "/marginal_models.rds"))
saveRDS(TRANSFORMED, file=paste0(data_wd, subfold, REG, "/transformedData.rds"))
if(interactive()){
commandArgs <- function(...){c("05","present","NW")}
}
#### SETUP ####----------------------------------------------------------
if(substr(osVersion,1,3) == "Win"){
source("S:/CodeABG/setup_script_00.R")
}else if (substr(osVersion,1,3) %in% c("Cen","Fed")){
source("/prj/aquacat/CodeABG/setup_script_00.R")
}else{
source("~/AQUACAT/CodeABG/setup_script_00.R")
}
library(ilaprosUtils)
library(lmomco)
library(extRemes)
library(pastecs)
library(dplyr)
# ws1 <- "pc05"
# thresh1 <- "POT2"
# jT <- which(threshName==thresh1)
# jW <- which(wsName == ws1)
# print(paste("Running for threshold", thresh1, "at ", ws1, "minimum spread."))
regions <- c("ANG", "ESC", "NE", "NSC", "NW", "SE", "SEV", "SSC",
"SW", "THA", "TRE", "WAL")
if(length(args)==3){
RCM <- sprintf("%02d", as.numeric(args[1]))
period <- args[2]
if(period=="present"){
suffix <- "_198012_201011"
}else if (period=="future"){
suffix <- "_205012_208011"
}
REG <- args[3]
if(!any(REG == regions)){
stop(paste("incorrect call: Rscript 110_HT_PoEEstimation.R gcm period region \n",
"- Region must be one of: ANG, ESC, NE, NSC, NW, SE, SEV, SSC, SW, THA, TRE, WAL."))
}
}
# suffix_pres <- "_198012_201011"
# subfold_pres <- paste0("RCM", RCM, suffix_pres, "/")
ncpres <- paste0(g2g_wd, "dmflow_RCM", RCM, suffix, "_out.nc")
##### DATA #####-------------------------------------------------------
#5 lists of NH lists, one for each threshold
threshMat <- readdf(paste0(data_wd, subfold, "threshMat_RCM",
RCM, suffix, ".csv"))
ST <- Sys.time()
ncin <- nc_open(ncpres)
print(Sys.time() - ST)
partable <- readdf(paste0(data_wd,subfold,
"paramtableG_",thresh1, "_RCM", RCM, suffix, ".csv"))
ht_events <- nc_open(paste0(data_wd,subfold, REG, "/eventHT_",
REG,"_",thresh1,"_", ws1,"_RCM", RCM, suffix, ".nc"), write=T)
print(ht)
print(ht_events)
ec_events <- nc_open(paste0(data_wd, subfold, REG, "/eventOBS_region_NW_RCM01_198012_201011.nc"))
ec_events <- nc_open(paste0(data_wd, subfold, REG, "/eventOBS_region_NW_RCM05_198012_201011.nc"))
print(ec_events)
ec_events2 <- nc_open(paste0(data_wd, subfold, REG, "/eventOBSZ.nc"))
ec_events2 <- nc_open(paste0(data_wd, subfold, REG, "/eventOBSZ.nc"))
ec_events2 <- nc_open(paste0(data_wd, subfold, REG, "/eventOBSZ.nc"))
print(ec_events2)
ec_events2 <- nc_open(paste0(data_wd, subfold, REG, "/eventOBSZ.nc"))
print(ec_events2)
nc_close(ec_events)
nc_close(ec_events2)
nc_close(ec_events)
nc_close(ec_events2)
ec_events <- nc_open(paste0(data_wd, subfold, REG, "/eventOBS_region_NW_RCM05_198012_201011.nc"))
#~~~~~~~~~~~~~~~~~~~~~~~
# Adam Griffin, 2020-06-17
#
# Using Heffernan and Tawn model for spatial coherence to generate new events.
#
# For aquaCAT, Project 07441.
#
# OUTPUTS: NewEventHT_***.csv,
#          coefficients.rds,
#          zscores.rds,
#          depStruct.rds
#
# Created ABG 2020-06-17
# Pipeline version 2020-09-07
#
#~~~~~~~~~~~~~~~~~~~~~~~
if(interactive()){
commandArgs <- function(...){c("06","present","NW")}
}
if(substr(osVersion,1,3) == "Win"){
source("S:/CodeABG/setup_script_00.R")
}else{
source("/prj/aquacat/CodeABG/setup_script_00.R")
}
regions <- c("ANG", "ESC", "NE", "NSC", "NW", "SE", "SEV", "SSC", "SW", "THA", "TRE", "WAL")
if(length(args)==3){
RCM <- sprintf("%02d",as.numeric(args[1]))
period <- args[2]
if(period=="present"){
suffix <- "_198012_201011"
}else if (period=="future"){
suffix <- "_205012_208011"
}
REG <- args[3]
if(!any(REG == regions)){
stop(paste("incorrect call: Rscript 109_HeffTawn_Modelling.R gcm period region \n",
"- Region must be one of: ANG, ESC, NE, NSC, NW, SE, SEV, SSC, SW, THA, TRE, WAL."))
}
}
##### SETUP #####-----------------------------------------------------------
suppressPackageStartupMessages({
library(texmex)
library(dplyr)
library(extRemes)
library(reshape2)
library(tidyverse)
})
source(paste0(wd,"07d_texmex_slimline.R"))
obs_events <- nc_open(paste0(data_wd,subfold, REG,"/eventOBS_region_",
REG, "_RCM", RCM, suffix, ".nc"))
ec_events <- nc_open(paste0(data_wd, subfold, REG, "/eventOBS_region_NW_RCM05_198012_201011.nc"))
if(interactive()){
commandArgs <- function(...){c("05","present","NW")}
}
if(substr(osVersion,1,3) == "Win"){
source("S:/CodeABG/setup_script_00.R")
}else{
source("/prj/aquacat/CodeABG/setup_script_00.R")
}
regions <- c("ANG", "ESC", "NE", "NSC", "NW", "SE", "SEV", "SSC", "SW", "THA", "TRE", "WAL")
if(length(args)==3){
RCM <- sprintf("%02d",as.numeric(args[1]))
period <- args[2]
if(period=="present"){
suffix <- "_198012_201011"
}else if (period=="future"){
suffix <- "_205012_208011"
}
REG <- args[3]
if(!any(REG == regions)){
stop(paste("incorrect call: Rscript 109_HeffTawn_Modelling.R gcm period region \n",
"- Region must be one of: ANG, ESC, NE, NSC, NW, SE, SEV, SSC, SW, THA, TRE, WAL."))
}
}
##### SETUP #####-----------------------------------------------------------
suppressPackageStartupMessages({
library(texmex)
library(dplyr)
library(extRemes)
library(reshape2)
library(tidyverse)
})
obs_events <- nc_open(paste0(data_wd,subfold, REG,"/eventOBS_region_",
REG, "_RCM", RCM, suffix, ".nc"))
ec_events <- nc_open(paste0(data_wd, subfold, REG, "/eventOBS_region_NW_RCM05_198012_201011.nc"))
print(obs_events)
print(ec_events)
ht_events <- nc_open(paste0(data_wd,subfold, REG, "/eventHT_",
REG,"_",thresh1,"_", ws1,"_RCM", RCM, suffix, ".nc"), write=T)
print(ht_events)
nc_events <- nc_open(paste0(data_wd,subfold, "eventOBS_",
thresh1,"_", ws1,"_RCM", RCM, suffix, ".nc"),
write=TRUE)
print(nc_events)
ec_events <- nc_open(paste0(data_wd, subfold, REG, "/eventEC_region_NW_RCM05_198012_201011.nc"))
print(ec_events)
obs_events <- nc_open(paste0(data_wd, subfold, REG, "/eventOBS_region_NW_RCM05_198012_201011.nc"))
print(obs_events)
obs_events <- nc_open(paste0(data_wd, subfold, REG, "/eventOBS_region_NW_RCM05_198012_201011B.nc"))
subfold
obs_events <- nc_open(paste0(data_wd, "RCM04_198012_201011", REG, "/eventOBS_region_NW_RCM04_198012_201011B.nc"))
obs_events <- nc_open(paste0(data_wd, "RCM04_198012_201011/", REG, "/eventOBS_region_NW_RCM04_198012_201011B.nc"))
print(obs_events)
data_wd <- "S:/Data/"
REG <- "NW"
# ws1 <- "pc05"
# thresh1 <- "POT2"
FF_flag <- FALSE
RCMS <- c("01","04","05","06","07","08","09","10","11","12","13","15")
for(RCM in RCMS){
for(j in 1:2){
period <- c("present","future")[j]
suffix <- c("_198012_201011", "_205012_208011")[j]
if(FF_flag){
subfold <- paste0("RCM", RCM, suffix, "_FF/")
}else{
subfold <- paste0("RCM", RCM, suffix, "/")
}
savepath <- paste0(data_wd, subfold, REG, "/eventHT_",REG,"_",
thresh1,"_", ws1, "_RCM", RCM, suffix, ".nc")
try({
ht_events <- nc_open(savepath, write=T)
evNo <- ncvar_get(ht_events, "eventNo")
print(savepath)
print(range(evNo, na.rm=T))
})
}
}
source('S:/CodeABG/z_scratch_checkNumberOfEvents.R')
source('S:/CodeABG/z_scratch_checkNumberOfEvents.R')
source('S:/CodeABG/z_scratch_checkNumberOfEvents.R')
source('S:/CodeABG/z_scratch_checkNumberOfEvents.R')
setdw("S:/CodeABG")
setwd("S:/CodeABG")
